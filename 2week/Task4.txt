Task4 생각해보기

1. enum과 as const의 차이는 무엇일까요? 트리쉐이킹과 번들 사이즈 관점에서 이를 조사하고 확인해보세요.

    - enum
        - 구현 : TypeScript의 `enum`은 코드에 컴파일된 후 자바스크립트 객체로 존재한다.
                각 `enum`멤버는 객체의 프로퍼티로 컴파일되고, 이 프로퍼티들은 키와 값의 형태로 번들에 포함된다.

        - 번들 사이즈 : `enum`은 번들 사이즈에 영향을 미친다.
                     `enum`이 컴파일된 자바스크립트 코드는 실행 시점에도 객체로 존재해야 하므로, 해당 객체는 번들에 포함된다.
                     이는 `enum`의 모든 멤버가 번들에 포함되기 때문에 사용되지 않는 `enum`멤버라도 번들 사이즈를 증가시킨다.
        
        - 트리 쉐이킹 : `enum`은 트리 쉐이킹에 친화적이지 않다.
                     번들러가 `enum`객체 내의 개별 멤버가 사용되는지 여부를 정활히 파악하기 어렵기 때문에,
                     전체 `enum`객체가 결과 번들에 포함될 수 있다. 이는 사용되지 않는 코드가 최종 출력물에 포함될 가능성을 높인다.

    - as const
        - 구현 : `as const`는 리터럴 타입의 불변성을 강조하기 위해 사용된다.
                TypeScript는 이를 타입 검사 시점에만 사용하며, 컴파일된 자바스크립트 코드에는 아무런 영향을 미치지 않는다.

        - 번들 사이즈 : `as const` 사용은 번들 사이즈에 영향을 미치지 않는다.
                     `as const`로 선언된 값들은 컴파일 시점에만 타입 검사에 사용되고, 컴파일된 자바스크립트 코드에서는 제외된다.
                     따라서 `as const`는 실제 실행 코드에 포함되지 않아 번들 사이즈를 증가시키지 않는다.

        - 트리 쉐이킹 : `as const`선언은 트리 쉐이킹에 완벽하게 호환됩니다.
                     컴파일 후 제거되기 때문에 불필요한 코드가 최종 번들에 남지 않는다.


    번들 사이즈와 트리 쉐이킹을 최적화하고자 한다면, `as const`사용이 `enum`보다 효과적이다.
    `as const`는 필요한 경우에만 타입 체크로 사용되며, 런타임에는 코드에 포함되지 않는다.

    `enum`은 특정 값을 그룹화하고 코드 내에서 명확하게 참조할 필요가 있을 때 유용하다.
    그러나 번들 사이즈와 트리 쉐이킹을 생각한다면 `as const`를 이용한 대체 방법을 생각하는게 좋다.


2. enum은 그렇다면 쓰지 않는 것이 좋을까요?
    - `enum` 사용 여부는 상황에 따라 다르다.
      번들 사이즈와 트리 쉐이킹을 중시하는 프로젝트의 경우, `enum` 대신 `as const`를 사용하여 타입 안정성을 유지하면서
      더 효율적인 코드 번들을 생성할 수 있다.
      하지만 `enum`은 가독성과 유지보수 측면에서 이점을 제공하며, 명확한 값 집합을 표현할 때 유용하다.
      프로젝트의 요구 사항과 팀의 선호에 따라 선택해야된다.

3. export한 type을 받을 때 import type을 해야하는 이유는 무엇일까요?

    - `import type`은 가져오려는 심볼이 오직 타입으로만 사용됨을 명확하게 한다.
      코드를 읽는 다른 개발자에게 해당 심볼이 런타임에 영향을 주지 않고, 컴파일 시 타입 체크에만 사용된다는 것을 명시적으로 알려준다

    - `import type`을 사용하면, TypeScript 컴파일러와 번들러가 해당 타입이 런타임에 필요하지 않다는 것을 인식하고,
      더 효율적인 트리 쉐이킹을 수행할 수 있다.
      결과적으로 최종 자바스크립트 번들에서 해방 타입 관련 코드를 제거할 수 있어서 번들 사이즈를 줄일 수 있다.

    코드의 명확성을 증가 시키고, 불필요한 코드를 제거하여 번들 사이즈를 최적화할 수 있다.