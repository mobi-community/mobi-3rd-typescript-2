tsconfig란?
타입스크립트를 자바스크립트로 변환할 때의 설정을 정의해놓는 파일
  - 프로젝트에서 tsc라는 명령어를 치면 타입스크립트 설정 파일에 정의된 내용을 기준으로 변환 작업(컴파일) 진행
    => 만약, tsc app.ts 명령어를 실행할 경우 app.ts 파일이 app.js 파일로 변환
  - tsc 명령어를 대상 파일을 지정하지 않고 실행하면 현재 폴더에 있는 타입스크립트 설정 파일을 기준으로 변환 작업 수행
  - 현재 폴더에 타입스크립트 설정 파일이 없다면 프로젝트 폴더 내에서 상위 폴더의 경로 검색

{
 "compilerOptions": {
  "target": "es5", // 'es3', 'es5', 'es2015', 'es2016', 'es2017','es2018', 'esnext' 가능
  "module": "commonjs", //무슨 import 문법 쓸건지 'commonjs', 'amd', 'es2015', 'esnext'
  "allowJs": true, // js 파일들 ts에서 import해서 쓸 수 있는지 
  "checkJs": true, // 일반 js 파일에서도 에러체크 여부 
  "jsx": "preserve", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
  "declaration": true, //컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
  "outFile": "./", //모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)
  "outDir": "./", //js파일 아웃풋 경로바꾸기
  "rootDir": "./", //루트경로 바꾸기 (js 파일 아웃풋 경로에 영향줌)
  "removeComments": true, //컴파일시 주석제거 
  "lib": ["ES2020", "DOM", "DOM.Iterable"], // TypeScript가 사용할 수 있는 라이브러리 지정 => ES2020과 DOM 라이브러리를 사용하며, DOM.Iterable을 사용하여 반복 가능한 DOM 요소를 다룸

  "files": ["app.ts", "./utils/math.ts"] // 타입스크립트 변환 명령어를 입력할 때마다 대상 파일의 경로를 지정하지 않고 설정 파일에 미리 정의
  "include": ["src"], // 컴파일 대상 파일 및 폴더 지정 => src 내 파일들
  /*
    와일드 카드 패턴 (js, jsx, ts, tsx, .d.ts 파일 확장자에 해당)
      * : 해당 디렉토리의 모든 파일 검색
      ? : 해당 디렉토리 안에 파일의 이름 중 한 글자라도 맞으면 해당
      ** : 하위 디렉토리를 재귀적으로 접근(하위 디렉토리의 하위 디렉토리가 존재하는 경우 반복해서 접근)
  */
   "exclude": ["node_modules"] // 컴파일(변환) 하지 않을 폴더 지정
    "extends": "./config/base" // 특정 타입스크립트 설정 파일에서 다른 타입스크립트 설정의 내용을 가져와서 추가할 수 있는 속성

  "strict": true, //strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기
  "noImplicitAny": true, //any타입 금지 여부
  "strictNullChecks": true, //null, undefined 타입에 이상한 짓 할시 에러내기 
  "strictFunctionTypes": true, //함수파라미터 타입체크 강하게 
  "strictPropertyInitialization": true, //class constructor 작성시 타입체크 강하게
  "noImplicitThis": true, //this 키워드가 any 타입일 경우 에러내기
  "alwaysStrict": true, //자바스크립트 "use strict" 모드 켜기

  "noUnusedLocals": true, //쓰지않는 지역변수 있으면 에러내기
  "noUnusedParameters": true, //쓰지않는 파라미터 있으면 에러내기
  "noImplicitReturns": true, //함수에서 return 빼먹으면 에러내기 
  "noImplicitAny": true, // any 타입이 의도치않게 발생할 경우 에러내기
  "noFallthroughCasesInSwitch": true, //switch문 이상하면 에러내기 
 }
}