타입스크립트에서 꼭 필요한 ts-config

- 이번 TASK를 통해 타입스크립트의 ts-config는 이외에도 어떠한 역할을 할 수 있고 어떠한 설정을 할 수 있을지 바로 잡고 정리 해봅시다.

Q. ts-config의 역할은 무엇이며 어떠한 옵션을 다룰 수 있는가?

    - tsconfig.json의 역할
        1.프로젝트 경계 설정: 
            - `tsconfig.json`은 특정 디렉토리에 위치함으로써 해당 디렉토리를 포함하는 모드 TypeScript 파일들이 하나의 프로젝트로 간주되게 한다
            - 프로젝트의 범위를 정의하고, 파일들이 어떻게 서로 관련되는지 TypeScript 컴파일러에게 알려준다

        2. 컴파일러 옵션 제공: 
            - 컴파일러의 동작을 제어하는 다양한 옵션을 설정할 수 있다
            - JavaScript의 ECMAScript 버전 설정(`target`), 모듈 시스템(`module`), 엄격한 타입검사(`strict`), 출력 디렉토리(`outDir`)등이 포함된다

        3. 컴파일 대상 파일 지점:
            - `files`,`include`,`exclude` 같은 속성을 사용하여 컴파일러가 처리해야 할 파일들을 지정하거나 제외할 수 있다.
            - 이를 통해 불필요한 파일을 컴파일 과정에서 제외시키거나, 특정 파일들만을 명시적으로 컴파일 대상으로 지정할 수 있다.

        4. 개발 도구와의 통합 용이:
            - `tsconfig.json` 파일은 개발 환경(IDE)과의 통합에서도 중요한 역할을 한다.
            - 많은 개발 도구들이 이 파일을 참조하여 프로젝트 구조를 이해하고, 오류 체크, 자동 완성, 코드 탐색 등의 기능을 제공한다.
    
        5. 코드 품질 관리:
            - 엄격한 타입체크, 암시적 any 금지(`noImplicitAny`)등의 옵션을 활성화 함으로써 코드 품질을 향상시킬 수 있다.
            - 이는 잠재적인 오류를 사전에 찾아내고, 보다 안정적인 애플리케이션 개발을 도울 수 있다.
            
    - 다룰 수 있는 설정 옵션
        `tsconfig.json`에서 설정할 수 있는 옵션은 매우 다양하다.

        - `compilerOptions`: 컴파일러의 동작을 제어하는 주요 설정이 포함된다.
            - `target`: 컴파일된 JavaScript 코드의 ECMAScript 버전을 지정합니다 (예: `ES5`, `ES6`)
            - `module`: 모듈 시스템을 지정한다(`CommonJS`,`ES6`,`None`등)
            - `strict`: 모든 엄격한 타입-체킹 옵션을 활성화한다.
            - `noImplicitAny`: 명시적으로 타입이 지정되지 않는 경우 오류를 발생시킨다.
            - `removeComments`: 컴파일 과정에서 소스 코드 주석을 제거한다.
            - `outDir`: 컴파일된 파일들을 배치할 출력 디렉토리를 지정한다.
            - `sourceMap`: 소스 맵을 생성하여, 런타임에서 발생하는 에러를 원본 TypeScript 파일에 매핑할수 있게한다. 디버깅을 용이하게 한다.
            - `watch`: 파일 시스템의 변경을 감시하고, 변경이 감지되면 자동으로 다시 컴파일한다.
            - `allowJs`: `.js`파일을 컴파일 과정에 포함시켜 JavaScript와 TypeScript가 혼합된 프로젝트를 지원한다.
            - `checkJs`: `.js`파일 내의 오류를 체크한다. 이옵션은 JavaScript 프로젝트에서 점진적으로 TypeScript를 도입하려는 경우 유용할 수 있다
            - `jsx`: JSX 문법을 사용하는 React 프로젝트에서 필요하다. 이 옵션은 JSX 코드를 처리하는 방법을 정의한다. (예: `react`, `preserve`)
            - `declaration`: `.d.ts` 선언 파일을 생성한다. 이 파일들은 TypeScript 라이브러리를 만들 때 유용하며, 다른 TypeScript 프로젝트에서
                             해당 라이브러리를 사용할 때 타입 정보를 제공한다.
            - `incremental`: 증분 컴파일을 활성화하여 컴파일 시간을 단축시킨다.
            - `skipDefaultLibCheck`: 기본 라이브러리의 타입 체크를 건너뛰어 컴파일 시간을 개선한다.
            - `baseUrl`과 `paths`: 모듈 해석을 위한 기본 URL을 설정하고, 특정 경로 별칭을 정의한다.
        - `include` 및 `exclude`: 컴파일 과정에 포함시키거나 제외할 파일 혹은 디렉토리를 지정한다.
        - `files`: 컴파일할 파일 목록을 명시적으로 지정한다
            - `rootDir`: 입력 파일들의 루트 디렉토리를 지정한다. 출력 구조를 조절하는 데 도움을 준다