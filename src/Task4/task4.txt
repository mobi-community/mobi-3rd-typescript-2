# Task4

> ## 생각해보기
>
> 1.  enum과 as const의 차이는 무엇일까요? 트리쉐이킹과 번들 사이즈 관점에서 이를 조사하고 확인해보세요
> 2.  enum은 그렇다면 쓰지 않는 것이 좋을까요?
> 3.  export한 type을 받을 때 import type을 해야하는 이유는 무엇일까요?

### 트리쉐이킹이란?

- 웹 개발에서 중요한 최적화 기법 중 하나로, 번들링 과정에서 불필요한 코드(사용되지 않는 모듈)를 식별하고 제거하는 기법이다.

- 웹 애플리케이션을 관리하고 성능을 향상시키는데 필수적인 요소로 페이지 로딩 속도를 향상시키고 사용자의 경험을 개선하는데 중요한 역할을 한다.

---

- 트리쉐이킹의 단계별 과정
  - 코드 분석 : 번들러(예: Webpack)는 모든 코드를 분석하여 사용되고 있는 모듈을 확인한다.
  - 불필요한 코드 제거 : 사용되지 않는 모듈은 최종 번들에서 제외된다.
  - 최적화된 번들 생성 : 필요한 모듈만 포함된 최적화된 번들이 생성된다.

## enum과 const

TypeScript에서 enum과 const는 가독성을 높이기 위해 서로 연관된 상수들을 하나의 nameSpace에 묶어서 관리할 때 사용된다.

ex) enum 키워드를 사용해서 type 선언

    enum COLOR = {
      red, green, blue
    }

ex) 객체 리터럴에 as const라는 type assertion 사용

    const COLOR = {
      red: 0,
      green: 1,
      blue: 2
    } as const

위의 경우 객체의 프로퍼티들이 `readonly`로 다루어지기 때문에 값이 변경될 우려가 없다.

### 그렇다면 이 둘은 무엇이 다른 것일까?

### enum이란?

> enum은 다른 언어에서 사용되듯이 서로 연관된 상수를 하나의 nameSpace로 묶어서 추상화를 시키려는 목적으로 사용된다.
> 같은 nameSpace의 property는 중복되는 값을 가질 수 없다.
> 컴파일 시간에 객체로 컴파일 되어 번들링되며, 번들 크기에 영향을 줄 수 있다.
> enum의 property는 런타임에서 변경될 수 있으며, 자동으로 숫자 또는 문자열 값으로 초기화된다.

### const란?

> as const는 type assertion의 한 종류로 리터럴 타입의 추론 범위를 줄이고 값의 재할당을 막는 목적으로 사용된다.
> 리터럴 타입을 강제하는 타입 단언이다.
> as const 를 사용하면 해당 값이 변경되지 않음을 보장하고, 리터럴 타입으로 값의 범위를 좁히므로 트리쉐이킹에 도움이 된다.
> 번들 크기를 줄일 수 있다.

**enum과 const의 차이**

- 번들 크기와 타입 안정성

  작은 프로젝트나 번들 크기가 중요한 프로젝트의 경우 enum 대신 const를 사용하는 것이 좋을 수 있다.

  위에서 언급했다싶이 enum은 번들 크기에 영향을 주고, 런타임에서 변경이 가능하다. 그러나 const assertion과 union을 사용하면 번들 크기를 줄이고 타입 안정성을 높일 수 있다.

### export한 type을 받을 때 import type을 해야하는 이유는 무엇일까?

자바스크립트에서는 type을 사용할 필요가 없다. type을 import/export 하게 되면 런타임 과정에서 필요없는 부분을 제거하기 때문에 컴파일 결과에서 제외된다.

import type은 타입만 가져오는 것으로, 실제 값이나 코드를 가져오지 않는다. 따라서 번들링할 때 해당 타입이 포함되지 않는다.

때때로 타입을 import하는 것만으로는 컴파일러가 해당 타입을 제거하지 않는 경우가 있는데, 이 때 import type을 사용하여 해당 타입을 명시적으로 제거할 수 있다. 이는 번들 크기를 줄이고 불필요한 타입 정보를 제거하여 타입 체크 속도를 높이는데 도움이 된다.

- 코드 가독성 향상

  타입스크립트에서는 일반적으로 코드를 작성할 때 모듈에서 사용되는 모든 타입을 불러오기 위해 import 구문을 사용한다. 이 경우 코드는 길어지고, 가독성이 떨어질 수 있다

  그러나 타입만을 import 하는 경우, 코드의 가독성이 향상되고 코드량이 줄어들어 유지보수가 용이해진다.

- 불필요한 모듈 로딩 방지

  전체 모듈을 import 하는 경우, 어플리케이션이 로드될 때 불필요한 모듈도 함게 로딩되어 성능이 저하될 수 있다.

  하지만 타입만을 import하는 경우 필요한 타입만을 로드하여 성능 개선에 도움을 줄 수 있다.

- 컴파일 속도 향상

  타입만을 import 하는 경우, 컴파일러가 불필요한 코드를 처리하지 않아 컴파일 속도가 빨라진다.

- 타입 안정성

  타입만을 improt 하는 경우, 타입 호환성 검사를 보다 엄격하게 수행할 수 있어 타입 안정성을 보장할 수 있다.
