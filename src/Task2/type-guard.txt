Type Guard 개념 정의 및 연산자

Type Guard를 사용하면 조건문에서 객체의 타입을 좁혀나갈 수 있다.
컴파일러가 타입을 예측할 수 있도록 타입을 좁혀주어서 조금 더 type safety함을 보장할 수 있다.

[Built-in Guard]
1. typeof
  - 피연산자의 타입을 판단하여 문자열로 반환한다.
  - 자바스크립트의 원시타입들만 판별이 가능하다.
    (객체타입은 in 연산자를 통해 typeguard 가능)
  - null type은 typeof 시 'object' 반환


2. instanceof
  - 판별할 객체가 특정한 클래스에 속하는지 확인할 수 있다.
    (자바스크립트에서 prototype 체인에 생성자의 prototype이 있는지 여부를 확인하는 방식으로 동작한다고 보면 된다.)

3. in
  - 객체 내부에 특정 프로퍼티가 존재하는지 여부를 확인할 구 있다.



[리터럴 Type Guard]
  - === / == / !== / != 연산자를 사용해 타입을 구분한다.
  - union 타입에 리터럴 타입이 있는 경우에도 동일하게 적용한다.
  - (공통 프로퍼티 값을 비교해 union 타입 구분)


[null과 undefined (strictNullChecks)]
  - value == null / value != null 로 null 과 undefined를 모두 걸러낼 수 있다.

[사용자 정의 Type Guard]
  - 조건별로 다른 타입으로 졸히고 싶은 경우 user defined type guards 함수를 작성(정의)하여 활용할 수 있다.
    (사용자가 직접 타입을 구별하는 함수를 만들 수 있다.)
  - 단순히 "어떤 인자명은 어떠한 타입이다"라는 값을 리턴하는 함수이다.
  - boolean을 return한다.